# Kubernetes Secrets Template for Portfolio Tracker
# 
# IMPORTANT: This is a template file. Do NOT commit actual secrets to version control.
# 
# To use this template:
# 1. Copy this file to secrets.yaml
# 2. Replace all CHANGE_ME_* values with actual base64-encoded secrets
# 3. Apply the secrets to your cluster: kubectl apply -f secrets.yaml
# 4. Add secrets.yaml to .gitignore to prevent accidental commits
#
# To base64 encode a value: echo -n "your_secret_value" | base64

apiVersion: v1
kind: Secret
metadata:
  name: portfolio-secrets
  namespace: portfolio-tracker
  labels:
    app: portfolio-tracker
type: Opaque
data:
  # Database credentials (base64 encoded)
  # Example: echo -n "portfolio_user" | base64
  db-username: CHANGE_ME_base64_encoded_db_username
  
  # Example: echo -n "secure_password_123" | base64
  db-password: CHANGE_ME_base64_encoded_db_password
  
  # Redis password (base64 encoded)
  # Example: echo -n "redis_password_456" | base64
  redis-password: CHANGE_ME_base64_encoded_redis_password
  
  # Application security keys (base64 encoded)
  # Generate: openssl rand -base64 32 | base64 -w 0
  app-key: CHANGE_ME_base64_encoded_app_key
  
  # Generate: openssl rand -hex 64 | base64 -w 0
  jwt-secret: CHANGE_ME_base64_encoded_jwt_secret
  
  # Email configuration (if using notifications)
  # mail-username: CHANGE_ME_base64_encoded_mail_username
  # mail-password: CHANGE_ME_base64_encoded_mail_password

---
# Example of how to generate and apply secrets:
# 
# # Generate secure passwords
# DB_PASSWORD=$(openssl rand -base64 32)
# REDIS_PASSWORD=$(openssl rand -base64 32)
# APP_KEY=$(openssl rand -base64 32)
# JWT_SECRET=$(openssl rand -hex 64)
# 
# # Create the secret
# kubectl create secret generic portfolio-secrets \
#   --from-literal=db-username=portfolio_user \
#   --from-literal=db-password="$DB_PASSWORD" \
#   --from-literal=redis-password="$REDIS_PASSWORD" \
#   --from-literal=app-key="$APP_KEY" \
#   --from-literal=jwt-secret="$JWT_SECRET"
